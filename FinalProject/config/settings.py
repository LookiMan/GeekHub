"""
Django settings for config project.

Generated by "django-admin startproject" using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

from dotenv import load_dotenv


load_dotenv()

try:
    from config.local_settings import *
except ImportError:
    # Build paths inside the project like this: BASE_DIR / "subdir".
    BASE_DIR = Path(__file__).resolve().parent.parent

    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")

    # SECURITY WARNING: don"t run with debug turned on in production!
    DEBUG = False

    ALLOWED_HOSTS = ["*"]

    LOGIN_URL = "chat:login"
    LOGIN_REDIRECT_URL = "chat:index"

    TELEGRAM_BOT_FILE_SIZE_LIMIT = 2.5 * 1024 * 1024  # 2.5 MB

    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

    if not TELEGRAM_BOT_TOKEN:
        raise BaseException(
            "TELEGRAM_BOT_TOKEN not found in OS environment paths")

    TELEGRAM_BOT_WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")

    if not TELEGRAM_BOT_WEBHOOK_HOST:
        raise BaseException(
            "WEBHOOK_HOST not found in OS environment paths")

    REDIS_URI = os.getenv("REDIS_URI")

    if not REDIS_URI:
        raise BaseException(
            "REDIS_URI not found in OS environment paths")

    # From JWT
    ALGORITHM = "HS256"

    # Application definition
    INSTALLED_APPS = [
        "whitenoise.runserver_nostatic",
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "channels",
        "rest_framework",
        "chat",
        "telegram_bot",
    ]

    MIDDLEWARE = [
        "django.middleware.security.SecurityMiddleware",
        "whitenoise.middleware.WhiteNoiseMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "django.middleware.gzip.GZipMiddleware",
    ]

    ROOT_URLCONF = "config.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "config.wsgi.application"
    ASGI_APPLICATION = "config.asgi.application"

    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [REDIS_URI],
            },
        },
    }

    # Database
    # https://docs.djangoproject.com/en/3.2/ref/settings/#databases

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

    # Password validation
    # https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/3.2/topics/i18n/

    LANGUAGE_CODE = "ru"

    TIME_ZONE = "Europe/Istanbul"

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.2/howto/static-files/

    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "chat", "static")
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

    MEDIA_URL = "/media/"
    MEDIA_ROOT = os.path.join(BASE_DIR, "chat", "media")

    PHOTOS_URL = "/photos/"
    PHOTOS_ROOT = os.path.join(BASE_DIR, "chat", "photos")

    STATICFILES_DIRS = [
        PHOTOS_ROOT,
        MEDIA_ROOT,
    ]

    DATA_UPLOAD_MAX_NUMBER_FIELDS = 100000

    # Default primary key field type
    # https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
    REST_FRAMEWORK = {}
    DJANGO_CHANNELS_REST_API = {}

    # MODELS
    AUTH_USER_MODEL = "chat.Staff"

    # CELERY
    broker_url = REDIS_URI
    CELERY_broker_url = REDIS_URI
    result_backend = REDIS_URI
    accept_content = ["application/json"]
    task_serializer = "json"
    result_serializer = "json"
    timezone = TIME_ZONE
    CELERY_TASK_DEFAULT_QUEUE = "default"

    import django_heroku
    django_heroku.settings(locals())
